name: Terraform CI/CD (Plan + Manual Approval + Apply)

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
  push:
    branches: [main]

permissions:
  contents: read
  pull-requests: write
  id-token: write
  deployments: write

env:
  TF_VERSION: 1.6.6
  TF_WORKING_DIR: prod-infra

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ${{ env.TF_WORKING_DIR }}

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform fmt check
        run: terraform fmt -check

      - name: Terraform init
        run: terraform init

      - name: Terraform validate
        run: terraform validate

      - name: Terraform plan
        id: plan
        run: terraform plan -out=tfplan.out

      - name: Save plan output (for review)
        run: terraform show -no-color tfplan.out > plan-output.txt

      - name: Upload plan artifacts
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: |
            ${{ env.TF_WORKING_DIR }}/tfplan.out
            ${{ env.TF_WORKING_DIR }}/plan-output.txt

      - name: Comment plan result on PR
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: terraform-plan
          path: ${{ env.TF_WORKING_DIR }}/plan-output.txt

  terraform-apply:
    name: Terraform Apply (Manual Approval Required)
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/main')
    environment:
      name: production
      url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

    defaults:
      run:
        working-directory: ${{ env.TF_WORKING_DIR }}

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform init
        run: terraform init

      - name: Download plan artifact
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan
          path: ${{ env.TF_WORKING_DIR }}
        continue-on-error: true

      - name: Terraform plan (re-validate before apply)
        id: verify
        run: terraform plan -out=tfplan-apply.out

      - name: Show verified plan
        run: terraform show -no-color tfplan-apply.out

      # --- Manual approval happens here (via GitHub Environment Protection) ---

      - name: Terraform apply
        run: terraform apply -auto-approve tfplan-apply.out

      - name: Deployment success message
        if: success()
        run: |
          echo "âœ… Terraform Apply completed successfully!"
          echo "ðŸš€ Infrastructure deployed to AWS in region: ${{ env.AWS_REGION }}"

      # Optional: Slack or Email notification (uncomment if needed)
      # - name: Notify Slack
      #   if: success()
      #   uses: slackapi/slack-github-action@v1.24.0
      #   with:
      #     payload: |
      #       {
      #         "text": "âœ… Terraform deployment to *production* completed successfully in ${{ env.AWS_REGION }}."
      #       }
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
